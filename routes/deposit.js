import { TonClient, Address, fromNano, Cell } from "@ton/ton";
import express from "express";
import User from "../models/User.js";
import Deposit from "../models/Deposit.js";
import mongoose from "mongoose";
import axios from "axios";
import UserBlack from "../models/UserBlack.js";

const router = express.Router();

const botToken = process.env.TELEGRAM_BOT_TOKEN;
const adminIds = process.env.ADMIN_IDS
  ? process.env.ADMIN_IDS.split(",").map((id) => id.trim())
  : [];

async function sendWarningToAdmins(telegramId) {
  const message =
    `üö®üö®üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n` +
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>${telegramId}</code> –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ TON. –í—ã–¥–∞–Ω –±–∞–Ω üö´`;

  const blacklistedUser = await UserBlack.findOne({
    telegramId: String(telegramId),
  });

  if (!blacklistedUser) {
    UserBlack.create({ telegramId: String(telegramId) });
  }

  for (const adminId of adminIds) {
    try {
      await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: adminId,
        text: message,
        parse_mode: "HTML",
      });
    } catch (error) {
      console.log(error);
      // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö—ç—à—É —á–µ—Ä–µ–∑ Toncenter API
async function getTransactionByHash(address, hash) {
  try {
    const response = await axios.get(
      `https://toncenter.com/api/v2/getTransactions?address=${address.toString()}&hash=${hash}&limit=1`,
      {
        headers: {
          "X-API-Key":
            "81d2c78823637dd19947dfc560d5414c55a6ac6f62ede468120cfa39b80baeea",
        },
      }
    );
    const transactions = response.data.result;
    if (!transactions || transactions.length === 0) {
      throw new Error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
    return transactions[0];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ Toncenter:", error);
    throw error;
  }
}

router.post("/:telegramId", async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const { telegramId } = req.params;
    const { amount, currency, transactionId, result } = req.body;

    console.log(result);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!amount || amount <= 0) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞" });
    }

    if (currency !== "TON") {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞" });
    }

    if (!transactionId) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: "transactionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    const walletAddressStr = "UQD39Shoh1etFYqjVHau4d5pG5lZ3vg8AryiWkRcWudlhgj8";
    let walletAddress;
    try {
      walletAddress = Address.parse(walletAddressStr);
    } catch (error) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞" });
    }

    const expectedAmount = amount * 1_000_000_000; // –°—É–º–º–∞ –≤ –Ω–∞–Ω–æ—Ç–æ–Ω–∞—Ö

    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º BOC –∏ –ø–æ–ª—É—á–∞–µ–º —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      let transactionHash;
      try {
        const bocCell = Cell.fromBoc(Buffer.from(transactionId, "base64"))[0];
        console.log(bocCell);
        transactionHash = bocCell.hash().toString("hex");
      } catch (error) {
        await session.abortTransaction();
        session.endSession();
        sendWarningToAdmins(telegramId);
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOC" });
      }

      if (!transactionHash) {
        await session.abortTransaction();
        session.endSession();
        sendWarningToAdmins(telegramId);
        return res
          .status(400)
          .json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" });
      }


      const transaction = await getTransactionByHash(
        walletAddress,
        transactionHash
      );


      if (!transaction) {
        await session.abortTransaction();
        session.endSession();
        sendWarningToAdmins(telegramId);
        return res.status(400).json({ message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const isValid =
        transaction.in_msg && // –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        transaction.in_msg.destination === walletAddress.toString() && // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        parseInt(transaction.in_msg.value) >= expectedAmount && // –°—É–º–º–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –±–æ–ª—å—à–µ
        transaction.in_msg.source !== "" && // –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        transaction.transaction_id.hash === transactionHash; // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ö—ç—à–∞

      if (!isValid) {
        await session.abortTransaction();
        session.endSession();
        sendWarningToAdmins(telegramId);
        return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è" });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ
      const existingDeposit = await Deposit.findOne({ transactionId }).session(
        session
      );
      if (existingDeposit) {
        await session.abortTransaction();
        session.endSession();
        return res.status(400).json({ message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞" });
      }

      // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —Ç.–¥.)
      const user = await User.findOne({ telegramId }).session(session);
      if (!user) {
        await session.abortTransaction();
        session.endSession();
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const starsToAdd = Math.floor(amount * 100); // 1 TON = 100 –∑–≤—ë–∑–¥
      user.balance += starsToAdd;
      user.totalDeposits += starsToAdd;
      await user.save({ session });

      if (user.totalDeposits >= 100 && user.invitedBy) {
        const referrer = await User.findOne({
          telegramId: user.invitedBy,
        }).session(session);
        if (referrer && !referrer.referralsAwarded?.includes(telegramId)) {
          referrer.diamonds += 1;
          referrer.referralsAwarded = referrer.referralsAwarded
            ? [...referrer.referralsAwarded, telegramId]
            : [telegramId];
          await referrer.save({ session });
        }
      }

      const deposit = new Deposit({
        telegramId,
        amount,
        starsAdded: starsToAdd,
        currency,
        transactionId,
      });
      await deposit.save({ session });

      await session.commitTransaction();
      session.endSession();

      res.json({
        newBalance: user.balance,
        totalDeposits: user.totalDeposits,
        starsAdded: starsToAdd,
        message: `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${starsToAdd} –∑–≤—ë–∑–¥ –∑–∞ ${amount} ${currency}`,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
      await session.abortTransaction();
      session.endSession();
      return res
        .status(400)
        .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ BOC" });
    }
  } catch (error) {
    console.error("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:", error);
    await session.abortTransaction();
    session.endSession();
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

export default router;
