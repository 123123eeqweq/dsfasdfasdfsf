import express from "express";
import User from "../models/User.js";
import UserBlack from "../models/UserBlack.js";
import axios from "axios";
import dotenv from "dotenv";

const router = express.Router();

dotenv.config();

const mainBotToken = process.env.TELEGRAM_MAIN_BOT_TOKEN;
const botToken = process.env.TELEGRAM_BOT_TOKEN;
const adminIds = process.env.ADMIN_IDS
  ? process.env.ADMIN_IDS.split(",").map((id) => id.trim())
  : [];

router.get("/:telegramId", async (req, res) => {
  try {
    const user = await User.findOne({ telegramId: req.params.telegramId });
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({
      telegramId: user.telegramId,
      firstName: user.firstName,
      photoUrl: user.photoUrl,
      balance: user.balance,
      diamonds: user.diamonds,
      inventory: user.inventory,
      totalDeposits: user.totalDeposits,
      openedTopupCases: user.openedTopupCases,
      hasInitiatedFirstWithdrawal: user.hasInitiatedFirstWithdrawal,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/add-balance", async (req, res) => {
  const { telegramId, amount, type = "stars", secret } = req.body;

  if (
    !telegramId ||
    !Number.isInteger(amount) ||
    amount <= 0 ||
    secret !== process.env.SECRET_KEY
  ) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }
  if (!["stars", "diamonds"].includes(type)) {
    return res
      .status(400)
      .json({ message: "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å stars –∏–ª–∏ diamonds" });
  }

  try {
    const update =
      type === "diamonds"
        ? { diamonds: amount }
        : { balance: amount, totalDeposits: amount };
    const user = await User.findOneAndUpdate(
      { telegramId },
      { $inc: update },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({
      message: `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount} ${type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/add-balance/remove", async (req, res) => {
  const { telegramId, amount, type = "stars", secret } = req.body;

  if (
    !telegramId ||
    !Number.isInteger(amount) ||
    amount <= 0 ||
    secret !== process.env.SECRET_KEY
  ) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }
  if (!["stars", "diamonds"].includes(type)) {
    return res
      .status(400)
      .json({ message: "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å stars –∏–ª–∏ diamonds" });
  }

  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const currentBalance = type === "diamonds" ? user.diamonds : user.balance;
    if (currentBalance < amount) {
      return res
        .status(400)
        .json({ message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${type} –¥–ª—è —Å–Ω—è—Ç–∏—è` });
    }

    const update =
      type === "diamonds" ? { diamonds: -amount } : { balance: -amount };
    const updatedUser = await User.findOneAndUpdate(
      { telegramId },
      { $inc: update },
      { new: true }
    );

    res.json({
      message: `–°–Ω—è—Ç–æ ${amount} ${type} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/ban", async (req, res) => {
  const { telegramId, secret } = req.body;

  if (!telegramId || secret !== process.env.SECRET_KEY) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  try {
    const user = await User.findOne({ telegramId: String(telegramId) });

    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const blacklistedUser = await UserBlack.findOne({
      telegramId: String(telegramId),
    });

    if (blacklistedUser) {
      return res
        .status(400)
        .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ" });
    }

    await UserBlack.create({ telegramId });

    user.inventory = [];
    user.balance = 0;
    user.diamonds = 0;
    user.totalDeposits = 0;
    user.save();

    res.json({
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!`,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/unban", async (req, res) => {
  const { telegramId, secret } = req.body;

  if (!telegramId || secret !== process.env.SECRET_KEY) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  try {
    const blacklistedUser = await UserBlack.findOne({
      telegramId: String(telegramId),
    });

    if (!blacklistedUser) {
      return res
        .status(400)
        .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ" });
    }

    await UserBlack.deleteOne({ telegramId });

    res.json({
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω!`,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/initiate-withdrawal/:telegramId", async (req, res) => {
  try {
    const user = await User.findOneAndUpdate(
      { telegramId: req.params.telegramId },
      { $set: { hasInitiatedFirstWithdrawal: true } },
      { new: true }
    );
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({
      message: "–ü–µ—Ä–≤—ã–π –≤—ã–≤–æ–¥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω",
      hasInitiatedFirstWithdrawal: true,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/withdraw/:telegramId/:giftId", async (req, res) => {
  try {
    const user = await User.findOne({ telegramId: req.params.telegramId });
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const giftIndex = user.inventory.findIndex(
      (item) => item.giftId === req.params.giftId
    );
    if (giftIndex === -1) {
      return res.status(400).json({ message: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ" });
    }

    const gift = user.inventory[giftIndex];
    user.inventory.splice(giftIndex, 1);
    await user.save();

    try {
      await axios.post(
        `https://api.telegram.org/bot${mainBotToken}/sendMessage`,
        {
          chat_id: user.telegramId,
          text: `‚ö†Ô∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –Ω–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç üëâ @tgrun_support23 –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã —É–∂–µ –ø–∏—Å–∞–ª–∏ —Ä–∞–Ω—å—à–µ!\n–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n‚ÄºÔ∏è–ë–µ–∑ —ç—Ç–æ–≥–æ <b>–≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏</b>, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º <b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã —Ç–æ—á–∫—É –∏–ª–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ</b>.\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!`,
          parse_mode: "HTML",
        }
      );
    } catch (error) {
      console.log(error);
      // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || adminIds.length === 0) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    } else {
      const blacklistedUser = await UserBlack.findOne({
        telegramId: req.params.telegramId,
      });
      const alertMsg = !blacklistedUser
        ? ""
        : "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!\n\n";
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
      const message =
        `${alertMsg}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–≤–µ–ª –ø–æ–¥–∞—Ä–æ–∫:\n` +
        `üë§ ID: <code>${req.params.telegramId}</code>\n` +
        `üéÅ –ü–æ–¥–∞—Ä–æ–∫: ${gift.name} (${req.params.giftId})\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${gift.price} –∑–≤—ë–∑–¥\n` +
        `üîó –°—Å—ã–ª–∫–∞: https://t.me/@id${req.params.telegramId}\n\n` +
        `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n` +
        `üí∏ –ë–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤—ë–∑–¥\n` +
        `üíé –ê–ª–º–∞–∑—ã: ${user.diamonds}\n` +
        `üéí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: ${user.inventory.length}\n` +
        `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString("ru-RU")}\n` +
        `üë®‚Äçüíº –ü—Ä–∏–≥–ª–∞—à—ë–Ω: ${
          user.invitedBy ? `<code>${user.invitedBy}</code>` : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        }\n` +
        `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals.length}\n` +
        `üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${user.referralBonus} –∑–≤—ë–∑–¥\n` +
        `üèÜ –ù–∞–≥—Ä–∞–∂–¥—ë–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referralsAwarded.length}\n` +
        `üí≥ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${user.totalDeposits} –∑–≤—ë–∑–¥\n`;

      for (const adminId of adminIds) {
        try {
          await axios.post(
            `https://api.telegram.org/bot${botToken}/sendMessage`,
            {
              chat_id: adminId,
              text: message,
              parse_mode: "HTML",
            }
          );
        } catch (error) {
          console.log(error);
          // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        }
      }
    }

    res.json({
      message: "–ü–æ–¥–∞—Ä–æ–∫ –≤—ã–≤–µ–¥–µ–Ω",
      inventory: user.inventory,
    });
  } catch (error) {
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/check-subscription/:telegramId", async (req, res) => {
  try {
    const { telegramId } = req.params;
    const channelId = -1002522126399; // ID –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è

    if (!telegramId) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
    }

    const response = await axios.get(
      `https://api.telegram.org/bot${mainBotToken}/getChatMember`,
      {
        params: {
          chat_id: channelId,
          user_id: telegramId,
        },
      }
    );

    const status = response.data.result.status;
    const isSubscribed = ["member", "administrator", "creator"].includes(
      status
    );

    res.json({
      telegramId,
      channelId,
      isSubscribed,
    });
  } catch (error) {
    if (error.response?.data?.error_code === 400) {
      return res.status(400).json({
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
      });
    }
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

export default router;
