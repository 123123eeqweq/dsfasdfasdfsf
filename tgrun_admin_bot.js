import dotenv from "dotenv";
dotenv.config();
import TelegramBot from "node-telegram-bot-api";
import axios from "axios";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const token = process.env.TELEGRAM_BOT_TOKEN;
const adminIds = process.env.ADMIN_IDS.split(",").map((id) => id.trim());
const apiUrl = process.env.API_URL;
const secretKey = process.env.SECRET_KEY;

axios.defaults.headers.common["Authorization"] = `Bearer ${secretKey}`;

// –§—É–Ω–∫—Ü–∏–∏
const isAdmin = (chatId) => {
  const userId = chatId.toString();

  if (!adminIds.includes(userId)) {
    bot.sendMessage(chatId, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω üö´");
    return false;
  }

  return true;
};

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  if (!isAdmin(chatId)) {
    return;
  }

  bot.sendMessage(
    chatId,
    "–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! üëä –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º.\n\n‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã: /add <user_id> <amount> [stars|diamonds]\n‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã/–∞–ª–º–∞–∑—ã: /remove <user_id> <amount> [stars|diamonds]\n‚ùå –ó–∞–±–∞–Ω–∏—Ç—å: /ban <user_id>\n‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å: /unban <user_id>"
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add
bot.onText(/\/add (\d+) (\d+)(?: (stars|diamonds))?/, async (msg, match) => {
  const chatId = msg.chat.id;

  if (!isAdmin(chatId)) {
    return;
  }

  const telegramId = match[1];
  const amount = parseInt(match[2]);
  const type = match[3] || "stars";

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (amount <= 0) {
    return bot.sendMessage(chatId, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è! üòí");
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    const response = await axios.post(`${apiUrl}/users/add-balance`, {
      telegramId,
      amount,
      type,
      secret: secretKey,
    });

    bot.sendMessage(
      chatId,
      `–ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount} ${type} —é–∑–µ—Ä—É ${telegramId}! üí´`
    );
  } catch (error) {
    if (error.response) {
      bot.sendMessage(chatId, `–û–π, –∫–æ—Å—è–∫: ${error.response.data.message} üòï`);
    } else {
      bot.sendMessage(chatId, "–°–µ—Ä–≤–∞–∫ –æ—Ç–≤–∞–ª–∏–ª—Å—è, –ø–Ω–∏ –∞–¥–º–∏–Ω–∞! üòÖ");
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remove
bot.onText(/\/remove (\d+) (\d+)(?: (stars|diamonds))?/, async (msg, match) => {
  const chatId = msg.chat.id;

  if (!isAdmin(chatId)) {
    return;
  }

  const telegramId = match[1];
  const amount = parseInt(match[2]);
  const type = match[3] || "stars";

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (amount <= 0) {
    return bot.sendMessage(chatId, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è! üòí");
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    const response = await axios.post(`${apiUrl}/users/add-balance/remove`, {
      telegramId,
      amount,
      type,
      secret: secretKey,
    });

    bot.sendMessage(
      chatId,
      `–°–Ω—è—Ç–æ ${amount} ${type} —É —é–∑–µ—Ä–∞ ${telegramId}! üóëÔ∏è`
    );
  } catch (error) {
    if (error.response) {
      bot.sendMessage(chatId, `–û–π, –∫–æ—Å—è–∫: ${error.response.data.message} üòï`);
    } else {
      bot.sendMessage(chatId, "–°–µ—Ä–≤–∞–∫ –æ—Ç–≤–∞–ª–∏–ª—Å—è, –ø–Ω–∏ –∞–¥–º–∏–Ω–∞! üòÖ");
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban
bot.onText(/\/ban (\d+)$/, async (msg, match) => {
  const chatId = msg.chat.id;

  if (!isAdmin(chatId)) {
    return;
  }

  const telegramId = match[1];

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    const response = await axios.post(`${apiUrl}/users/ban`, {
      telegramId,
      secret: secretKey,
    });

    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω! ‚ùå`);
  } catch (error) {
    if (error.response) {
      bot.sendMessage(chatId, `–û–π, –∫–æ—Å—è–∫: ${error.response.data.message} üòï`);
    } else {
      bot.sendMessage(chatId, "–°–µ—Ä–≤–∞–∫ –æ—Ç–≤–∞–ª–∏–ª—Å—è, –ø–Ω–∏ –∞–¥–º–∏–Ω–∞! üòÖ");
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban
bot.onText(/\/unban (\d+) ?/, async (msg, match) => {
  const chatId = msg.chat.id;

  if (!isAdmin(chatId)) {
    return;
  }

  const telegramId = match[1];

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    const response = await axios.post(`${apiUrl}/users/unban`, {
      telegramId,
      secret: secretKey,
    });

    bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω! ‚úÖ`);
  } catch (error) {
    if (error.response) {
      bot.sendMessage(chatId, `–û–π, –∫–æ—Å—è–∫: ${error.response.data.message} üòï`);
    } else {
      bot.sendMessage(chatId, "–°–µ—Ä–≤–∞–∫ –æ—Ç–≤–∞–ª–∏–ª—Å—è, –ø–Ω–∏ –∞–¥–º–∏–Ω–∞! üòÖ");
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("polling_error", (error) => {
  console.error("Polling error:", error);
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ");
